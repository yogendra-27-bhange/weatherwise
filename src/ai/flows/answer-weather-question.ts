
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A weather question answering AI agent that can respond in English, Hindi, or Marathi (using Roman script).
 *
 * - answerWeatherQuestion - A function that handles the answering weather questions.
 * - AnswerWeatherQuestionInput - The input type for the answerWeatherQuestion function.
 * - AnswerWeatherQuestionOutput - The return type for the answerWeatherQuestion function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { searchLocation, getWeatherData } from '@/lib/weather-api';
import type { LocationInfo, CurrentWeatherData, DailyForecastItem } from '@/types/weather';

const AnswerWeatherQuestionInputSchema = z.object({
  question: z.string().describe('The question about the weather.'),
  location: z.string().describe('The location to get weather for (city name or "lat,lon").'),
});
export type AnswerWeatherQuestionInput = z.infer<typeof AnswerWeatherQuestionInputSchema>;

const AnswerWeatherQuestionOutputSchema = z.object({
  answer: z.string().describe('The answer to the question, in the detected language (Roman script).'),
});
export type AnswerWeatherQuestionOutput = z.infer<typeof AnswerWeatherQuestionOutputSchema>;

const OPENWEATHERMAP_API_KEY = process.env.OPENWEATHERMAP_API_KEY;

const getWeather = ai.defineTool(
  {
    name: 'getWeather',
    description: 'Returns the current weather conditions and a brief forecast for a location. Use this to answer specific questions about temperature, rain, wind, forecast etc.',
    inputSchema: z.object({
      locationName: z.string().describe('The name of the location (e.g., "London") or "latitude,longitude" string to get weather for.'),
    }),
    outputSchema: z.string().describe('A string describing the current weather conditions and a brief forecast, e.g., "Currently in London: Clear Sky, 15°C (feels like 14°C). Wind 10 km/h. Tomorrow: Few Clouds, High 18°C, Low 12°C." or an error message if data cannot be fetched.'),
  },
  async (input) => {
    if (!OPENWEATHERMAP_API_KEY || OPENWEATHERMAP_API_KEY === 'YOUR_OPENWEATHERMAP_API_KEY_HERE') {
      console.warn("OpenWeatherMap API key not available for getWeather tool. Using mock response.");
      return `The current weather in ${input.locationName} is sunny with a temperature of 25 degrees Celsius. (Mock Data - API Key Missing)`;
    }
    
    try {
      let locInfo: LocationInfo | null = null;
      // searchLocation can handle both "city name" and "lat,lon" strings.
      locInfo = await searchLocation(input.locationName); 

      if (!locInfo || !locInfo.lat || !locInfo.lon || locInfo.name === "Unknown City" || locInfo.name === "Search Error") {
        return `Sorry, I could not find detailed weather information for ${input.locationName}. Please check the location or try coordinates like "lat,lon".`;
      }

      const weather = await getWeatherData(locInfo);
      const current: CurrentWeatherData = weather.current;
      const tomorrow: DailyForecastItem | undefined = weather.daily?.[1];
      
      let summary = `Currently in ${current.locationName}: ${current.description}, ${current.temp}°C (feels like ${current.feelsLike}°C). Wind: ${current.windSpeed} km/h. Humidity: ${current.humidity}%. UV: ${current.uvIndex}. Sunrise: ${current.sunrise}, Sunset: ${current.sunset}.`;
      if(current.aqi !== undefined) {
        summary += ` AQI: ${current.aqi}.`
      } else {
        summary += ` AQI data not available.`
      }
      
      if (tomorrow) {
        summary += ` Tomorrow (${tomorrow.dayName.substring(0,3)}): ${tomorrow.description}, High ${tomorrow.highTemp}°C, Low ${tomorrow.lowTemp}°C.`;
      } else {
        summary += " No daily forecast data available for tomorrow."
      }
      return summary;

    } catch (error: any) {
      console.error("Error in getWeather tool:", error);
      return `Sorry, I encountered an error trying to fetch weather for ${input.locationName}: ${error.message || 'Unknown error'}.`;
    }
  }
);

const PromptInputSchema = AnswerWeatherQuestionInputSchema.extend({
  detectedLanguage: z.string().describe('The detected language for the response (English, Hindi, or Marathi).'),
});

const prompt = ai.definePrompt({
  name: 'answerWeatherQuestionPrompt',
  input: {schema: PromptInputSchema}, 
  output: {schema: AnswerWeatherQuestionOutputSchema},
  tools: [getWeather],
  prompt: `You are a friendly and helpful weather assistant.
The user's preferred language for the answer is: {{detectedLanguage}}.
If the detected language is Hindi, answer CONCISELY in Hindi (using Roman script).
If the detected language is Marathi, answer CONCISELY in Marathi (using Roman script).
Otherwise, answer CONCISELY in English.

Use the getWeather tool with the provided 'location' to get the current weather conditions and a brief forecast.
Then, answer the user's 'question' based on the weather information obtained.
Be concise and directly answer the question. If the question is general like "what's the weather?", provide a summary. If it's specific like "will it rain?", focus on that.
If the weather tool returns an error or cannot find the location, inform the user politely in the detected language.

Examples:
- User (Hindi query: "aaj barish hogi kya?", location: "Mumbai"): You'd call getWeather({locationName: "Mumbai"}). If tool indicates rain, you might answer: "haan, Mumbai mein aaj baarish hone ki sambhavna hai."
- User (Marathi query: "aaj paus ahe ka?", location: "Pune"): You'd call getWeather({locationName: "Pune"}). If tool indicates rain, you might answer: "ho, Pune madhe aaj paus padnyachi shantata aahe."
- User (English query: "will it rain today?", location: "London"): You'd call getWeather({locationName: "London"}). If tool indicates rain, you might answer: "Yes, there’s a chance of rain in London today."
- User (English query: "what is the weather like in Paris?", location: "Paris"): You'd call getWeather({locationName: "Paris"}). You might answer: "Currently in Paris: Few Clouds, 18°C (feels like 17°C). Wind 15 km/h. Tomorrow: Rain, High 20°C, Low 15°C."
- User (Hindi query: "Kal ka tapman kya hoga Agra mein?", location: "Agra"): You'd call getWeather({locationName: "Agra"}). You might answer: "Agra mein kal ka adhiktam tapman 25°C aur nyuntam 15°C rehne ki sambhavna hai, aur halke badal reh sakte hain."

Question: {{{question}}}
Location: {{{location}}}`,
});

function detectLanguage(question: string): 'Hindi' | 'Marathi' | 'English' {
  const lowerQuestion = question.toLowerCase();
  const hindiKeywords = ["kya", "hai", "hoga", "hogi", "kaise", "kab", "mausam", "barish", "tapman", "hava", "garmi", "sardi", "dhoop", "kal", "aaj"];
  const marathiKeywords = ["ahe", "ka", "kasa", "kadhi", "paus", "tapman", "vaara", "thandi", "un", "havaaman", "aahe", "udya", "aaj"];

  let hindiMatch = 0;
  let marathiMatch = 0;

  for (const keyword of hindiKeywords) {
    if (lowerQuestion.includes(keyword)) {
      hindiMatch++;
    }
  }
  for (const keyword of marathiKeywords) {
    if (lowerQuestion.includes(keyword)) {
      marathiMatch++;
    }
  }
  // More refined detection
  if (marathiMatch > hindiMatch && marathiMatch > 0) {
      if (lowerQuestion.includes("ahe") || lowerQuestion.includes("aahe") || lowerQuestion.includes("udya")) return 'Marathi';
  }
  if (hindiMatch > marathiMatch && hindiMatch > 0) {
      if (lowerQuestion.includes("hogi") || lowerQuestion.includes("hoga") || lowerQuestion.includes("kal")) return 'Hindi';
  }
  if (marathiMatch > 0 && marathiMatch >= hindiMatch) return 'Marathi'; // Fallback if specific keywords aren't present but Marathi count is higher/equal
  if (hindiMatch > 0 && hindiMatch > marathiMatch) return 'Hindi';   // Fallback for Hindi

  return 'English';
}

const answerWeatherQuestionFlow = ai.defineFlow(
  {
    name: 'answerWeatherQuestionFlow',
    inputSchema: AnswerWeatherQuestionInputSchema,
    outputSchema: AnswerWeatherQuestionOutputSchema,
  },
  async (input: AnswerWeatherQuestionInput) => {
    const detectedLanguage = detectLanguage(input.question);

    const promptInputPayload = {
      question: input.question,
      location: input.location,
      detectedLanguage,
    };

    const {output} = await prompt(promptInputPayload);
    if (!output || !output.answer) {
        let errorMsg = "Sorry, I could not generate a response at this time.";
        if (detectedLanguage === 'Hindi') errorMsg = "Maaf kijiye, main abhi jawab nahi de pa raha hoon.";
        if (detectedLanguage === 'Marathi') errorMsg = "Kshama kara, me sadhya uttar deu shakat nahi.";
      return { answer: errorMsg };
    }
    return output;
  }
);

export async function answerWeatherQuestion(input: AnswerWeatherQuestionInput): Promise<AnswerWeatherQuestionOutput> {
  return answerWeatherQuestionFlow(input);
}

    